#! /usr/bin/env sh
# Runs the SourceClear Agent
#
PRG="`which "$0" 2>/dev/null`"
if [ ! -f "$PRG" ]; then
  PRG="$0"
fi
# stolen from bin/ant {{{
# lightly modified to not leak variables
# need this for relative symlinks
while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    unset ls
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
    unset link
done
# }}}

TOPDIR="`dirname "$PRG"`"
TOPDIR="`cd "${TOPDIR}/.." && pwd`"

# use user's JRE if they provide one, else use our own
JRE_DIR=${CUSTOM_JRE_DIR:-$TOPDIR/jre}

java=${JRE_DIR}/bin/java
# sun.jnu.encoding for reading paths as UTF-8 , file.encoding for reading file contents as UTF-8
JAVA_OPTS="-Dsun.jnu.encoding=UTF-8 -Dfile.encoding=UTF-8 $JAVA_OPTS"
JAVA_OPTS="-Dhttps.protocols=TLSv1.2,TLSv1.1,TLSv1 $JAVA_OPTS"

command_exist() {
  type "$@" > /dev/null 2>&1
}

test_supported_os() {
  local os_name=$1
  local os_major=$(echo $2 | cut -f 1 -d . )
  local os_minor=$(echo $2 | cut -f 2 -d . )

  if [ -z "${os_major}" ] ; then
    os_major=0
  fi

  if [ -z "${os_minor}" ] ; then
    os_minor=0
  fi

  # Major version must be a number
  if ! (echo "${os_major}" | grep -q '^[0-9][0-9]*$') ; then
    return 1
  fi

  # Minor version of pre-releases may have non-numeric suffix, e.g.,
  # Alpine 3.12_alpha20200122
  os_minor=$(echo "${os_minor}" | grep -o '^[0-9]*')
  if [ -z "${os_minor}" ] ; then
    return 1
  fi
       
  case "${os_name}" in
    rhel)
      if [ "${os_major}" -ge 7 ] ; then
        return 0
      fi
      ;;
    ubuntu)
      if [ "${os_major}" -gt 18 -o \
           "${os_major}" -eq 18 -a "${os_minor}" -ge 4 ] ; then
        return 0
      fi
      ;;
    debian)
      if [ "${os_major}" -ge 9 ] ; then
        return 0
      fi
      ;;
    centos)
      if [ "${os_major}" -ge 7 ] ; then
        return 0
      fi
      ;;
    fedora)
      if [ "${os_major}" -ge 19 ] ; then
        return 0
      fi
      ;;
    alpine)
      if [ "${os_major}" -gt 3 -o \
           "${os_major}" -eq 3 -a "${os_minor}" -ge 11 ] ; then
        return 0
      fi
      ;;
    esac
    return 1
}

#
# Gather OS information
#
if [ -r /etc/os-release ]; then
  . /etc/os-release
  if ! test_supported_os "$ID" "$VERSION_ID" ; then
    LINUX_VERSION=${VERSION:-"$VERSION_ID"}
    echo "WARNING: SourceClear has not validated support of $ID version $LINUX_VERSION" >&2
  fi
else
  # test for centos version 6 that does not have /etc/os-release.
  if [ -r /etc/system-release ] ; then
    ID=$(awk '{print $1;}' /etc/system-release | tr [A-Z] [a-z])
    VERSION_ID=$(awk '{print $3;}' /etc/system-release)
    MAJOR_VERSION=$(echo $VERSION_ID | cut -f 1 -d . )
    if [ "$ID" != centos ] || [ "$MAJOR_VERSION" -lt "7" ] ; then
      echo "WARNING: SourceClear has not validated support of $ID version $VERSION_ID"  >&2
    fi
  else
    if command_exist sw_vers; then
      # might be a mac
      ID=$(sw_vers | grep ProductName | awk -F':' '{print tolower($2)}' | tr -d '[:space:]')
      VERSION_ID=$(sw_vers | grep ProductVersion | awk -F':' '{print $2}' | tr -d '[:space:]')
    else
      echo 'WARNING: SourceClear has not validated installation on this os distribution' >&2
    fi
  fi
fi

# magic to turn this process into running java with the appended jar.
exec "$java" $JAVA_OPTS -jar "${TOPDIR}/"srcclr-*jar "$@"
exit 1
